Frontend:
1. Creating a side bar:
    - I learned how to use aside tag in html
    - Incorporated online tutorials and used tailwindcss
2. Making sure that all pages of the SPA are centered, including the sidebar and the actual 
page content. Used HOC to make sure the stylings are aligned between all components (centered)
3. Enable pagination
4. add back to top functionality and automatically return to top when changing pages in pagination
5. Clicking on each recipe card in /search leads to a page that contains
step by step instructions for the recipe. It was hard to pass the recipe data through props
to a new route
3. search page automatically refreshes after clicking to the details page (hoc intercepted)
4. allow users to click on each card to get more info (like nutrition facts, ingredients,
steps to cook)

###
1. Take the cards out as a separate component to be reused in the favourites section.
This component should also include a "add to favourite", and this favourites state
should also be active based on what is on the "Favourites" page
2. The favourites state needs to be lifted to a higher component (currently the favourites get
cleared whenever I click on a new recipe)
3. Allow caching, so that when the user refreshes the browser, their past search result
still exists on the page
4. Enable advanced filters (more nutrient options) in the form of a dropdown

Backend:
1. In the search page, we limit the number of API calls by only fetching data from an API
when the user clicks search after inputting into fields of filters. We did not 
want to excessively call the public API as we are limited the number of uses.
2. Validations of user inputs in the backend (base value of 0+)
3. The backend still does not fetch the data properly (returning the same data everytime).
Fix: originally axios double encoded my request parameter (the percentage sign). So instead 
of using the axios "params" attribute, I created the entire API url using "new URLsearchParams"
and call the API directly with this.
4. The api might not return all 100 results each time (based on the query), as some 
returns less than 20 or even 0 results. Needed to add methods to avoid returning error from this.
Fixed logic in the O(n) function.
### 
1. Creating database if it does not already exist upon entering homepage
1. Add authentication, and create dynamic database management system. Allow users 
to create their own databases and make connections (hard coded for now )